{"version":3,"sources":["Components/Header.js","Components/firebase.js","Components/SwipeButtons.js","Components/TinderCards.js","Components/Chat.js","Components/Chats.js","Components/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","SwipeButtons","fontsize","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","Chat","message","profilePic","timestamp","Avatar","Chats","ChatScreen","input","setInput","image","messages","setMessages","value","onChange","e","target","placeholder","type","preventDefault","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"wbAwCeA,EAjCA,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACXC,EAAUC,cAChB,OACC,yBAAKC,UAAU,UACbH,EACA,kBAACI,EAAA,EAAD,CAAYC,QAAS,kBAAMJ,EAAQK,QAAQN,KAC1C,kBAAC,IAAD,CACCO,SAAS,QACTJ,UAAU,mBAIZ,kBAACC,EAAA,EAAD,KACC,kBAAC,IAAD,CAAYG,SAAS,QAAQJ,UAAU,mBAIzC,kBAAC,IAAD,CAASK,GAAG,KACX,yBACCL,UAAU,eACVM,IAAI,mEACJC,IAAI,YAGN,kBAAC,IAAD,CAASF,GAAG,SACX,kBAACJ,EAAA,EAAD,KACC,kBAAC,IAAD,CAAWG,SAAS,QAAQJ,UAAU,sB,iCCjB5BQ,E,OAJKC,EAASC,cAXN,CACtBC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKOC,Y,mGCiBRC,EAtBM,WACpB,OACC,yBAAKpB,UAAU,eACd,kBAACC,EAAA,EAAD,CAAYD,UAAU,uBACrB,kBAAC,IAAD,CAAYI,SAAS,WAEtB,kBAACH,EAAA,EAAD,CAAYD,UAAU,qBACrB,kBAAC,IAAD,CAAWI,SAAS,WAErB,kBAACH,EAAA,EAAD,CAAYD,UAAU,qBACrB,kBAAC,IAAD,CAAcI,SAAS,WAExB,kBAACH,EAAA,EAAD,CAAYD,UAAU,sBACrB,kBAAC,IAAD,CAAcI,SAAS,WAExB,kBAACH,EAAA,EAAD,CAAYD,UAAU,0BACrB,kBAAC,IAAD,CAAaqB,SAAS,aCeXC,EAnCK,WAAO,IAAD,EACGC,mBAAS,IADZ,mBAClBC,EADkB,KACVC,EADU,KAczB,OAXAC,qBAAU,WACT,IAAMC,EAAcnB,EAClBoB,WAAW,UACXC,YAAW,SAACC,GAAD,OACXL,EAAUK,EAASC,KAAKC,KAAI,SAACC,GAAD,OAASA,EAAIC,cAG3C,OAAO,WACNP,OAEC,IAEF,yBAAK3B,UAAU,yBACbwB,EAAOQ,KAAI,SAACG,GAAD,OACX,kBAAC,IAAD,CACCnC,UAAU,QACVoC,IAAKD,EAAOE,KACZC,aAAc,CAAC,KAAM,SAErB,yBACCC,MAAO,CAAEC,gBAAgB,OAAD,OAASL,EAAOM,IAAhB,MACxBzC,UAAU,QAEV,4BAAKmC,EAAOE,WAIf,kBAAC,EAAD,Q,iBChBYK,G,MAfF,SAAC,GAA8C,IAA5CL,EAA2C,EAA3CA,KAAMM,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UAC1C,OACC,kBAAC,IAAD,CAAMxC,GAAE,gBAAWgC,IAClB,yBAAKrC,UAAU,QACd,kBAAC8C,EAAA,EAAD,CAAQ9C,UAAU,cAAcO,IAAK8B,EAAM/B,IAAKsC,IAChD,yBAAK5C,UAAU,iBACd,4BAAKqC,GACL,2BAAIM,IAEL,uBAAG3C,UAAU,mBAAmB6C,OCerBE,EAzBD,WACb,OACC,yBAAK/C,UAAU,SACd,kBAAC,EAAD,CACCqC,KAAK,OACLM,QAAQ,aACRE,UAAU,aACVD,WAAW,QAEZ,kBAAC,EAAD,CACCP,KAAK,OACLM,QAAQ,aACRE,UAAU,aACVD,WAAW,QAEZ,kBAAC,EAAD,CACCP,KAAK,OACLM,QAAQ,aACRE,UAAU,aACVD,WAAW,U,QCgDAI,G,MAnEI,WAAO,IAAD,EACEzB,mBAAS,IADX,mBACjB0B,EADiB,KACVC,EADU,OAEQ3B,mBAAS,CACxC,CACCc,KAAM,QACNc,MAAO,MACPR,QAAS,WAEV,CACCN,KAAM,QACNc,MAAO,MACPR,QAAS,SAEV,CACCA,QAAS,WAda,mBAEjBS,EAFiB,KAEPC,EAFO,KAsBxB,OACC,yBAAKrD,UAAU,cACd,qDACCoD,EAASpB,KAAI,SAACW,GAAD,OACbA,EAAQN,KACP,yBAAKrC,UAAU,uBACd,kBAAC8C,EAAA,EAAD,CACC9C,UAAU,oBACVO,IAAKoC,EAAQN,KACb/B,IAAKqC,EAAQQ,QAEd,uBAAGnD,UAAU,oBAAoB2C,EAAQA,UAG1C,yBAAK3C,UAAU,uBACd,uBAAGA,UAAU,wBACX2C,EAAQA,aAKb,6BACC,0BAAM3C,UAAU,qBACf,2BACCsD,MAAOL,EACPM,SAAU,SAACC,GACVN,EAASM,EAAEC,OAAOH,QAEnBtD,UAAU,yBACV0D,YAAY,oBACZC,KAAK,SAEN,4BACCA,KAAK,SACLzD,QAvCgB,SAACsD,GACrBA,EAAEI,iBACFP,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAAET,QAASM,MACrCC,EAAS,KAqCLlD,UAAU,mBAHX,aC3BU6D,MAvBf,WACC,OACC,yBAAK7D,UAAU,OACd,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAO8D,KAAK,iBACX,kBAAC,EAAD,CAAQjE,WAAW,UACnB,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOkE,OAAK,EAACD,KAAK,KACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,OAED,kBAAC,IAAD,CAAOA,KAAK,SACX,kBAAC,EAAD,CAAQjE,WAAW,MACnB,kBAAC,EAAD,WCVcmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMtC,c","file":"static/js/main.222aa666.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport PersonIcon from '@material-ui/icons/Person';\nimport ForumIcon from '@material-ui/icons/Forum';\nimport IconButton from '@material-ui/core/IconButton';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nconst Header = ({ backButton }) => {\n\tconst history = useHistory();\n\treturn (\n\t\t<div className=\"header\">\n\t\t\t{backButton ? (\n\t\t\t\t<IconButton onClick={() => history.replace(backButton)}>\n\t\t\t\t\t<ArrowBackIosIcon\n\t\t\t\t\t\tfontSize=\"large\"\n\t\t\t\t\t\tclassName=\"header__icons\"\n\t\t\t\t\t/>\n\t\t\t\t</IconButton>\n\t\t\t) : (\n\t\t\t\t<IconButton>\n\t\t\t\t\t<PersonIcon fontSize=\"large\" className=\"header__icons\" />\n\t\t\t\t</IconButton>\n\t\t\t)}\n\n\t\t\t<NavLink to=\"/\">\n\t\t\t\t<img\n\t\t\t\t\tclassName=\"header__logo\"\n\t\t\t\t\tsrc=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\n\t\t\t\t\talt=\"tinder\"\n\t\t\t\t/>\n\t\t\t</NavLink>\n\t\t\t<NavLink to=\"/chat\">\n\t\t\t\t<IconButton>\n\t\t\t\t\t<ForumIcon fontSize=\"large\" className=\"header__icons\" />\n\t\t\t\t</IconButton>\n\t\t\t</NavLink>\n\t\t</div>\n\t);\n};\n\nexport default Header;\n","import firebase from 'firebase';\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyBKSZZyowLh1bbKngPmgluxOtC_J0ZvzQs',\n\tauthDomain: 'tinder-clone-d459d.firebaseapp.com',\n\tdatabaseURL: 'https://tinder-clone-d459d.firebaseio.com',\n\tprojectId: 'tinder-clone-d459d',\n\tstorageBucket: 'tinder-clone-d459d.appspot.com',\n\tmessagingSenderId: '306467565062',\n\tappId: '1:306467565062:web:f889e6df064812e59b5d87',\n\tmeasurementId: 'G-2M5HXHTQYP',\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React from 'react';\nimport './SwipeButtons.css';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport CloseIcon from '@material-ui/icons/Close';\nimport StarRateIcon from '@material-ui/icons/StarRate';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport { IconButton } from '@material-ui/core';\n\nconst SwipeButtons = () => {\n\treturn (\n\t\t<div className=\"swipeButton\">\n\t\t\t<IconButton className=\"swipeButton__repeat\">\n\t\t\t\t<ReplayIcon fontSize=\"large\" />\n\t\t\t</IconButton>\n\t\t\t<IconButton className=\"swipeButton__left\">\n\t\t\t\t<CloseIcon fontSize=\"large\" />\n\t\t\t</IconButton>\n\t\t\t<IconButton className=\"swipeButton__star\">\n\t\t\t\t<StarRateIcon fontSize=\"large\" />\n\t\t\t</IconButton>\n\t\t\t<IconButton className=\"swipeButton__right\">\n\t\t\t\t<FavoriteIcon fontSize=\"large\" />\n\t\t\t</IconButton>\n\t\t\t<IconButton className=\"swipeButton__lightning\">\n\t\t\t\t<FlashOnIcon fontsize=\"large\" />\n\t\t\t</IconButton>\n\t\t</div>\n\t);\n};\n\nexport default SwipeButtons;\n","import React, { useState, useEffect } from 'react';\nimport TinderCard from 'react-tinder-card';\nimport db from './firebase';\nimport './TinderCards.css';\nimport SwipeButtons from './SwipeButtons';\nconst TinderCards = () => {\n\tconst [people, setPeople] = useState([]);\n\n\tuseEffect(() => {\n\t\tconst unsubscribe = db\n\t\t\t.collection('people')\n\t\t\t.onSnapshot((snapshot) =>\n\t\t\t\tsetPeople(snapshot.docs.map((doc) => doc.data()))\n\t\t\t);\n\n\t\treturn () => {\n\t\t\tunsubscribe();\n\t\t};\n\t}, []);\n\treturn (\n\t\t<div className=\"tinder__cardContainer\">\n\t\t\t{people.map((person) => (\n\t\t\t\t<TinderCard\n\t\t\t\t\tclassName=\"swipe\"\n\t\t\t\t\tkey={person.name}\n\t\t\t\t\tpreventSwipe={['up', 'down']}\n\t\t\t\t>\n\t\t\t\t\t<div\n\t\t\t\t\t\tstyle={{ backgroundImage: `url(${person.url})` }}\n\t\t\t\t\t\tclassName=\"card\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<h3>{person.name}</h3>\n\t\t\t\t\t</div>\n\t\t\t\t</TinderCard>\n\t\t\t))}\n\t\t\t<SwipeButtons />\n\t\t</div>\n\t);\n};\n\nexport default TinderCards;\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport './Chat.css';\nimport { Link } from 'react-router-dom';\nconst Chat = ({ name, message, profilePic, timestamp }) => {\n\treturn (\n\t\t<Link to={`/chat/${name}`}>\n\t\t\t<div className=\"chat\">\n\t\t\t\t<Avatar className=\"chat__image\" alt={name} src={profilePic} />\n\t\t\t\t<div className=\"chat__details\">\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{message}</p>\n\t\t\t\t</div>\n\t\t\t\t<p className=\"chat__timestamp\">{timestamp}</p>\n\t\t\t</div>\n\t\t</Link>\n\t);\n};\n\nexport default Chat;\n","import React from 'react';\nimport './Chats.css';\nimport Chat from './Chat';\nconst Chats = () => {\n\treturn (\n\t\t<div className=\"chats\">\n\t\t\t<Chat\n\t\t\t\tname=\"mark\"\n\t\t\t\tmessage=\"hi how r u\"\n\t\t\t\ttimestamp=\"40 sec ago\"\n\t\t\t\tprofilePic=\"...\"\n\t\t\t/>\n\t\t\t<Chat\n\t\t\t\tname=\"mark\"\n\t\t\t\tmessage=\"hi how r u\"\n\t\t\t\ttimestamp=\"40 sec ago\"\n\t\t\t\tprofilePic=\"...\"\n\t\t\t/>\n\t\t\t<Chat\n\t\t\t\tname=\"mark\"\n\t\t\t\tmessage=\"hi how r u\"\n\t\t\t\ttimestamp=\"40 sec ago\"\n\t\t\t\tprofilePic=\"...\"\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default Chats;\n","import React, { useState } from 'react';\nimport './ChatScreen.css';\nimport Avatar from '@material-ui/core/Avatar';\nconst ChatScreen = () => {\n\tconst [input, setInput] = useState('');\n\tconst [messages, setMessages] = useState([\n\t\t{\n\t\t\tname: 'ellen',\n\t\t\timage: '...',\n\t\t\tmessage: 'whatsup',\n\t\t},\n\t\t{\n\t\t\tname: 'ellen',\n\t\t\timage: '...',\n\t\t\tmessage: 'hjooo',\n\t\t},\n\t\t{\n\t\t\tmessage: 'hello',\n\t\t},\n\t]);\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tsetMessages([...messages, { message: input }]);\n\t\tsetInput('');\n\t};\n\treturn (\n\t\t<div className=\"chatScreen\">\n\t\t\t<p>YOU MATCHED WITH ELLEN</p>\n\t\t\t{messages.map((message) =>\n\t\t\t\tmessage.name ? (\n\t\t\t\t\t<div className=\"chatScreen__message\">\n\t\t\t\t\t\t<Avatar\n\t\t\t\t\t\t\tclassName=\"chatScreen__image\"\n\t\t\t\t\t\t\talt={message.name}\n\t\t\t\t\t\t\tsrc={message.image}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<p className=\"chatScreen__text\">{message.message}</p>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"chatScreen__message\">\n\t\t\t\t\t\t<p className=\"chatScreen__textUser\">\n\t\t\t\t\t\t\t{message.message}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t)}\n\t\t\t<div>\n\t\t\t\t<form className=\"chatScreen__input\">\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\tsetInput(e.target.value);\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=\"chatScreen__inputField\"\n\t\t\t\t\t\tplaceholder=\"Type a message...\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\tonClick={handleSubmit}\n\t\t\t\t\t\tclassName=\"chatScreen__btn\"\n\t\t\t\t\t>\n\t\t\t\t\t\tSend\n\t\t\t\t\t</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default ChatScreen;\n","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport TinderCards from './Components/TinderCards';\nimport Chats from './Components/Chats';\nimport ChatScreen from './Components/ChatScreen';\nfunction App() {\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/chat/:person\">\n\t\t\t\t\t\t<Header backButton=\"/chat\" />\n\t\t\t\t\t\t<ChatScreen />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<TinderCards />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/chat\">\n\t\t\t\t\t\t<Header backButton=\"/\" />\n\t\t\t\t\t\t<Chats />\n\t\t\t\t\t</Route>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}